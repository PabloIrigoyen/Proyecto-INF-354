# -*- coding: utf-8 -*-
"""N reinas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iVdFtBnTUxd75dY4xwWbnb-QN_NbnYay
"""

import random
import math
def inicializar(n):
    return [random.randint(0, n - 1) for _ in range(n)]
def calcular(tablero):
    n=len(tablero)
    conflictos=0
    for i in range(n):
        for j in range(i+1,n):
            if tablero[i]==tablero[j] or abs(tablero[i]-tablero[j])==abs(i-j):
                conflictos+=1
    return conflictos
def mover(tablero):
    n=len(tablero)
    ntablero=tablero[:]
    fila=random.randint(0,n-1)
    ncolumna=random.randint(0,n-1)
    ntablero[fila] =ncolumna
    return ntablero

def recorrido_simulado(n, temperatura_inicial,tasa_enfriamiento,iteraciones_maximas):
    tablero=inicializar(n)
    conflictos=calcular(tablero)
    temperatura=temperatura_inicial
    for _ in range(iteraciones_maximas):
        if conflictos==0:
            return tablero
        ntablero=mover(tablero)
        conflictos_nuevos=calcular(ntablero)
        delta =conflictos_nuevos-conflictos
        if delta<0 or random.random()<math.exp(-delta/temperatura):
            tablero, conflictos = ntablero, conflictos_nuevos
        temperatura*=tasa_enfriamiento
        if temperatura<1e-3:
            break
    return tablero if conflictos==0 else None
n=int(input("Ingrese el valor de n: "))
temperatura_inicial=10*n
tasa_enfriamiento=0.999
iteraciones_maximas=500000
solucion = recorrido_simulado(n,temperatura_inicial,tasa_enfriamiento,iteraciones_maximas)
if solucion:
    print(f"Solución encontrada para n={n}: {solucion}")
else:
    print(f"No se encontró solución para n={n}")